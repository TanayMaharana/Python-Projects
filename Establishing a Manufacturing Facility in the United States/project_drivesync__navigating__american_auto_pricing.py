# -*- coding: utf-8 -*-
"""Project_DriveSync__Navigating _American_Auto_Pricing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eWtdLQDyShlVVgmtsZiPqEGvtOu8w4S1

# **INTRODUCTION**
#### In this ambitious Capstone project, we explore the American auto market, analyzing pricing factors using data and advanced tools to uncover hidden insights for XYZ Motors' success.
### Libraries To Be Used:
- #### Pandas
- #### Numpy

Task 1: Loading and Initial Data Exploration:
"""

## Importing the libraries
import pandas as pd
import numpy as np

# Loading the data
df_unclean = pd.read_csv(r"C:\Users\TANAY_MAHARANA\Documents\Python scripts\csv,text etc files for practice\car-prices_unclean - car-prices_unclean.csv.csv")
print(df_unclean["price"].median())
print("First Few Rows of the Dataset:\n",df_unclean.head())  ## printing the initial 5rows
print()
print("Dimensions of the Dataset:\n",df_unclean.shape)  ## checking dataset dimensions
print()
print("Summary of the Dataset:")
print(df_unclean.info()) ## checking the summary of the dataset
print()
print("Missing Values in the Dataset:\n",df_unclean.isnull().sum())  ## checking for null values in the dataset
print()
print("Duplicate values in the dataset:\n",df_unclean.duplicated().sum())  ## checking for duplicate value sin the data
print()
print("Unique values in each column:\n",df_unclean.nunique())  ## checking for unique values in each column
print()
print("Summary Statistics for Numerical Columns:\n",df_unclean.describe())  ## checking summary statistics for numerical columns

"""                             Task 02: Handling Missing values and Outliers:"""

df_clean = df_unclean.copy()  ## making a deep copy to work on

df_clean.drop(["car_ID", "Untitled"], axis = 1, inplace=True)  ## dropping unnecessary columns

symboling_mask = np.mean(df_clean["symboling"])  ## creating a mask value to fill null
df_clean["symboling"].fillna(symboling_mask, inplace=True)  ## filling nulls

price_mask = df_clean["price"].median()
df_clean["price"].fillna(price_mask, inplace=True)

fueltype_mask = df_clean["fueltype"].mode()[0]
df_clean["fueltype"].fillna(fueltype_mask, inplace=True)


# print(df_clean.isnull().sum())  ## confirming all non-null columns

## Identifying outliers in the price column
Q1 = np.percentile(df_clean["price"], 25)
Q3 = np.percentile(df_clean["price"], 75)

IQR = Q3 - Q1  ## interquartile range

lower_whisker = Q1 - 1.5*(IQR)  ## lower bound

upper_whisker = Q3 + 1.5*(IQR)  ## upper bound

outliers = df_clean[(df_clean["price"] < lower_whisker) | (df_clean["price"] > upper_whisker)]  ## conditional formatting
price_outlier_count = outliers["price"].count()

print(f"Possible outliers in the price column are:\n{outliers}")

df_clean["price"] = np.log1p(df_clean["price"])  ## normalizing the extreme prizes

"""                             Task 03: Data Cleaning and Preparation:"""

# print(df_clean.head(25))  ## checking the carname column

car_companies = pd.Series([car.split(" ")[0] for car in df_clean['CarName']], index = df_clean.index)

# df_clean.drop(columns= ['CarName'], axis = 1, inplace = True)

df_clean["car_company"] = car_companies  ## adding new column 'car_company'

## fixing some typos
df_clean["car_company"].replace({"vokswagen":"volkswagen", "toyouta":"toyota", "maxda":"mazda", "vw":"volkswagen", "porcshce": "porsche"}, inplace=True)

## counting the number of cars by each company
df_clean_company_pivot = df_clean.pivot_table(values="CarName", index="car_company", aggfunc="count").sort_values("CarName", ascending=False)
print(df_clean_company_pivot)

"""                             Task 04: Identifying Numerical Factors Impacting Car Prices"""

numerical_columns = df_clean.select_dtypes(np.number)   ## extracting numerical columns
correlation = numerical_columns.corr()                  ## finding correlation between numerical columns

price_correlations = correlation["price"]               ## picking the subset,co-relation of price with other numerical columns

## these are the correlation of other numerical columns with 'price'
print(f"Correlation coefficients with 'price':\n{price_correlations}")

print()

## these are the factors that have (absolute value of correlation > 0.4) have significant impact on car prices
significant_factors = price_correlations[np.abs(price_correlations) > 0.4]

print(f"Factors with significant impact on car prices:\n{significant_factors}")

"""                             Task 05: Identifying Categorical Factors Impacting Car Prices"""

categorical_columns = df_clean.select_dtypes("object", "category")
unique_fueltypes = categorical_columns['fueltype'].unique()

for type in unique_fueltypes:
    print(type)
    subset = df_clean[df_clean["fueltype"] == type]
    price_description = subset["price"].describe()
    print(price_description)

categorical_columns = df_clean.select_dtypes("object", "category")
# print(categorical_columns)

for column in categorical_columns.columns:
    unique_values = categorical_columns[column].unique()
    print(f"Impact of {column} on 'price':")

    for value in unique_values:
        subset = df_clean[df_clean[column] == value]
        price_description = subset["price"].describe()
        print(f"Category: {value}")
        print(price_description)
    print("\n")